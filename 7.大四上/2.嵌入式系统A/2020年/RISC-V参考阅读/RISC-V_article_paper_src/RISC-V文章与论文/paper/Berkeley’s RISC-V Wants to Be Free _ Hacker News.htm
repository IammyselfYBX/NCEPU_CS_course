<html><head><meta name="referrer" content="origin"></meta><link rel="stylesheet" type="text/css" href="news.css?fne33jPVFDhhw31fn3IF"></link><link rel="shortcut icon" href="favicon.ico"></link><script type="text/javascript">
function byId(id) {
  return document.getElementById(id);
}

function vote(node) {
  var v = node.id.split(/_/);   // {'up', '123'}
  var item = v[1];

  // hide arrows
  byId('up_'   + item).style.visibility = 'hidden';
  byId('down_' + item).style.visibility = 'hidden';

  // ping server
  var ping = new Image();
  ping.src = node.href;

  return false; // cancel browser nav
} </script><title>Berkeley’s RISC-V Wants to Be Free | Hacker News</title></head><body><center><table id="hnmain" op="item" border="0" cellpadding="0" cellspacing="0" width="85%" bgcolor="#f6f6ef"><tr><td bgcolor="#ff6600"><table border="0" cellpadding="0" cellspacing="0" width="100%" style="padding:2px"><tr><td style="width:18px;padding-right:4px"><a href="http://www.ycombinator.com"><img src="y18.gif" width="18" height="18" style="border:1px #ffffff solid;"></img></a></td><td style="line-height:12pt; height:10px;"><span class="pagetop"><b><a href="news">Hacker News</a></b><img src="s.gif" height="1" width="10"><a href="newest">new</a> | <a href="newcomments">comments</a> | <a href="show">show</a> | <a href="ask">ask</a> | <a href="jobs">jobs</a> | <a href="submit">submit</a></span></td><td style="text-align:right;padding-right:4px;"><span class="pagetop"><a href="login?goto=item%3Fid%3D8744929">login</a></span></td></tr></table></td></tr><tr style="height:10px"></tr><tr><td><table border="0"><tr><td><center><a id="up_8744929" href="vote?for=8744929&amp;dir=up&amp;goto=item%3Fid%3D8744929"><div class="votearrow" title="upvote"></div></a><span id="down_8744929"></span></center></td><td class="title"><span class="deadmark"></span><a href="http://www.eejournal.com/archives/articles/20141210-risc-v/">Berkeley’s RISC-V Wants to Be Free</a><span class="sitebit comhead"> (eejournal.com)</span></td></tr><tr><td colspan="1"></td><td class="subtext"><span class="score" id="score_8744929">103 points</span> by <a href="user?id=jobstijl">jobstijl</a> <a href="item?id=8744929">62 days ago</a>  | <a href="item?id=8744929">comments</a></td></tr></table><br><br>
<table border="0"><tr><td><table border="0"><tr><td><img src="s.gif" height="1" width="0"></td><td valign="top"><center><a id="up_8746288" href="vote?for=8746288&amp;dir=up&amp;goto=item%3Fid%3D8744929"><div class="votearrow" title="upvote"></div></a><span id="down_8746288"></span></center></td><td class="default"><div style="margin-top:2px; margin-bottom:-10px; "><span class="comhead"><a href="user?id=faragon">faragon</a> <a href="item?id=8746288">62 days ago</a> <span class="deadmark"></span></span></div><br>
<span class="comment"><font color="#000000">“There are two major products that came from Berkeley: LSD and Unix. We don&#x27;t believe this to be a coincidence.”<p>Unix came from Bell Labs in the East Coast. Californian Unix is just a non-elegant derivative, in my opinion (e.g. BSD sockets don&#x27;t follow the &quot;Unix philosophy&quot;, and one explanation could be the LSD, I agree with that).</font></span><p><font size="1"><font color="#f6f6ef">-----</font></font></td></tr></table></td></tr><tr><td><table border="0"><tr><td><img src="s.gif" height="1" width="40"></td><td valign="top"><center><a id="up_8746422" href="vote?for=8746422&amp;dir=up&amp;goto=item%3Fid%3D8744929"><div class="votearrow" title="upvote"></div></a><span id="down_8746422"></span></center></td><td class="default"><div style="margin-top:2px; margin-bottom:-10px; "><span class="comhead"><a href="user?id=andolanra">andolanra</a> <a href="item?id=8746422">62 days ago</a> <span class="deadmark"></span></span></div><br>
<span class="comment"><font color="#000000">For that matter, LSD was first synthesized by Albert Hofmann while he was working in Basel, Switzerland.</font></span><p><font size="1"><font color="#f6f6ef">-----</font></font></td></tr></table></td></tr><tr><td><table border="0"><tr><td><img src="s.gif" height="1" width="40"></td><td valign="top"><center><a id="up_8746668" href="vote?for=8746668&amp;dir=up&amp;goto=item%3Fid%3D8744929"><div class="votearrow" title="upvote"></div></a><span id="down_8746668"></span></center></td><td class="default"><div style="margin-top:2px; margin-bottom:-10px; "><span class="comhead"><a href="user?id=patrickg_zill">patrickg_zill</a> <a href="item?id=8746668">62 days ago</a> <span class="deadmark"></span></span></div><br>
<span class="comment"><font color="#000000">Could you maybe expand on your thoughts of BSD sockets vs. what SVR4 came up with?</font></span><p><font size="1"><font color="#f6f6ef">-----</font></font></td></tr></table></td></tr><tr><td><table border="0"><tr><td><img src="s.gif" height="1" width="80"></td><td valign="top"><center><a id="up_8747083" href="vote?for=8747083&amp;dir=up&amp;goto=item%3Fid%3D8744929"><div class="votearrow" title="upvote"></div></a><span id="down_8747083"></span></center></td><td class="default"><div style="margin-top:2px; margin-bottom:-10px; "><span class="comhead"><a href="user?id=faragon">faragon</a> <a href="item?id=8747083">62 days ago</a> <span class="deadmark"></span></span></div><br>
<span class="comment"><font color="#000000">Well, BSD sockets don&#x27;t use file abstraction. Plan 9 recovered &quot;Unix philosophy&quot; in that regard. In my opinion.</font></span><p><font size="1"><font color="#f6f6ef">-----</font></font></td></tr></table></td></tr><tr><td><table border="0"><tr><td><img src="s.gif" height="1" width="0"></td><td valign="top"><center><a id="up_8745090" href="vote?for=8745090&amp;dir=up&amp;goto=item%3Fid%3D8744929"><div class="votearrow" title="upvote"></div></a><span id="down_8745090"></span></center></td><td class="default"><div style="margin-top:2px; margin-bottom:-10px; "><span class="comhead"><a href="user?id=JoachimSchipper">JoachimSchipper</a> <a href="item?id=8745090">62 days ago</a> <span class="deadmark"></span></span></div><br>
<span class="comment"><font color="#000000">Does anyone have actual experience using RISC-V? It does come with a gcc toolchain, so it should just run C - but is it of any practical use yet, relative to the enormous ARM (or MIPS, or even SPARC) ecosystem?</font></span><p><font size="1"><font color="#f6f6ef">-----</font></font></td></tr></table></td></tr><tr><td><table border="0"><tr><td><img src="s.gif" height="1" width="40"></td><td valign="top"><center><a id="up_8745184" href="vote?for=8745184&amp;dir=up&amp;goto=item%3Fid%3D8744929"><div class="votearrow" title="upvote"></div></a><span id="down_8745184"></span></center></td><td class="default"><div style="margin-top:2px; margin-bottom:-10px; "><span class="comhead"><a href="user?id=qwerta">qwerta</a> <a href="item?id=8745184">62 days ago</a> <span class="deadmark"></span></span></div><br>
<span class="comment"><font color="#000000">We were investigating CPUs for embedded use. I am not sure right now if it was RISC or MIPS. The performance was fraction of ARM or x86. But the consulting company would build SOC exactly to our spec. There were zero licensing fees.<p>So for embedded use if performance is not important, I would seriously consider it.</font></span><p><font size="1"><font color="#f6f6ef">-----</font></font></td></tr></table></td></tr><tr><td><table border="0"><tr><td><img src="s.gif" height="1" width="80"></td><td valign="top"><center><a id="up_8745318" href="vote?for=8745318&amp;dir=up&amp;goto=item%3Fid%3D8744929"><div class="votearrow" title="upvote"></div></a><span id="down_8745318"></span></center></td><td class="default"><div style="margin-top:2px; margin-bottom:-10px; "><span class="comhead"><a href="user?id=arbuge">arbuge</a> <a href="item?id=8745318">62 days ago</a> <span class="deadmark"></span></span></div><br>
<span class="comment"><font color="#000000">Reading the article, I see no reason why there should be any major performance issues inherent to RISC-V. Lack of an ecosystem looks like the issue, at least initially. But a $1m licensing fee for a CPU with an established ecosystem is an issue too...</font></span><p><font size="1"><font color="#f6f6ef">-----</font></font></td></tr></table></td></tr><tr><td><table border="0"><tr><td><img src="s.gif" height="1" width="120"></td><td valign="top"><center><a id="up_8745426" href="vote?for=8745426&amp;dir=up&amp;goto=item%3Fid%3D8744929"><div class="votearrow" title="upvote"></div></a><span id="down_8745426"></span></center></td><td class="default"><div style="margin-top:2px; margin-bottom:-10px; "><span class="comhead"><a href="user?id=sspiff">sspiff</a> <a href="item?id=8745426">62 days ago</a> <span class="deadmark"></span></span></div><br>
<span class="comment"><font color="#000000">The reason the chips will be slower in practice is because they are produced in small batches, and need to be produced by smaller fabs and by extension much older process. MIPS is routinely produced at 95nm still.</font></span><p><font size="1"><font color="#f6f6ef">-----</font></font></td></tr></table></td></tr><tr><td><table border="0"><tr><td><img src="s.gif" height="1" width="160"></td><td valign="top"><center><a id="up_8745478" href="vote?for=8745478&amp;dir=up&amp;goto=item%3Fid%3D8744929"><div class="votearrow" title="upvote"></div></a><span id="down_8745478"></span></center></td><td class="default"><div style="margin-top:2px; margin-bottom:-10px; "><span class="comhead"><a href="user?id=asb">asb</a> <a href="item?id=8745478">62 days ago</a> <span class="deadmark"></span></span></div><br>
<span class="comment"><font color="#000000">We at lowRISC intend to produce in volume at 40nm or 28nm. <a href="http://www.lowrisc.org/" rel="nofollow">http:&#x2F;&#x2F;www.lowrisc.org&#x2F;</a></font></span><p><font size="1"><font color="#f6f6ef">-----</font></font></td></tr></table></td></tr><tr><td><table border="0"><tr><td><img src="s.gif" height="1" width="200"></td><td valign="top"><center><a id="up_8745550" href="vote?for=8745550&amp;dir=up&amp;goto=item%3Fid%3D8744929"><div class="votearrow" title="upvote"></div></a><span id="down_8745550"></span></center></td><td class="default"><div style="margin-top:2px; margin-bottom:-10px; "><span class="comhead"><a href="user?id=arbuge">arbuge</a> <a href="item?id=8745550">62 days ago</a> <span class="deadmark"></span></span></div><br>
<span class="comment"><font color="#000000">Looks really interesting. Where are you guys based? Cambridge, UK I&#x27;m guessing?</font></span><p><font size="1"><font color="#f6f6ef">-----</font></font></td></tr></table></td></tr><tr><td><table border="0"><tr><td><img src="s.gif" height="1" width="240"></td><td valign="top"><center><a id="up_8745711" href="vote?for=8745711&amp;dir=up&amp;goto=item%3Fid%3D8744929"><div class="votearrow" title="upvote"></div></a><span id="down_8745711"></span></center></td><td class="default"><div style="margin-top:2px; margin-bottom:-10px; "><span class="comhead"><a href="user?id=asb">asb</a> <a href="item?id=8745711">62 days ago</a> <span class="deadmark"></span></span></div><br>
<span class="comment"><font color="#000000">Yes, the core team is based in Cambridge, UK. However we do intend to be a truly open-source project, with an open and distributed development process which would involve arbitrarily geographically distributed third-party contributors.</font></span><p><font size="1"><font color="#f6f6ef">-----</font></font></td></tr></table></td></tr><tr><td><table border="0"><tr><td><img src="s.gif" height="1" width="200"></td><td valign="top"><center><a id="up_8748965" href="vote?for=8748965&amp;dir=up&amp;goto=item%3Fid%3D8744929"><div class="votearrow" title="upvote"></div></a><span id="down_8748965"></span></center></td><td class="default"><div style="margin-top:2px; margin-bottom:-10px; "><span class="comhead"><a href="user?id=sspiff">sspiff</a> <a href="item?id=8748965">61 days ago</a> <span class="deadmark"></span></span></div><br>
<span class="comment"><font color="#000000">That&#x27;s truly great to hear!</font></span><p><font size="1"><font color="#f6f6ef">-----</font></font></td></tr></table></td></tr><tr><td><table border="0"><tr><td><img src="s.gif" height="1" width="160"></td><td valign="top"><center><a id="up_8745432" href="vote?for=8745432&amp;dir=up&amp;goto=item%3Fid%3D8744929"><div class="votearrow" title="upvote"></div></a><span id="down_8745432"></span></center></td><td class="default"><div style="margin-top:2px; margin-bottom:-10px; "><span class="comhead"><a href="user?id=arbuge">arbuge</a> <a href="item?id=8745432">62 days ago</a> <span class="deadmark"></span></span></div><br>
<span class="comment"><font color="#000000">MOSIS offers multi-project wafer (MPW) runs at 28nm from GlobalFoundries.<p><a href="https://www.mosis.com/products" rel="nofollow">https:&#x2F;&#x2F;www.mosis.com&#x2F;products</a></font></span><p><font size="1"><font color="#f6f6ef">-----</font></font></td></tr></table></td></tr><tr><td><table border="0"><tr><td><img src="s.gif" height="1" width="160"></td><td valign="top"><center><a id="up_8745562" href="vote?for=8745562&amp;dir=up&amp;goto=item%3Fid%3D8744929"><div class="votearrow" title="upvote"></div></a><span id="down_8745562"></span></center></td><td class="default"><div style="margin-top:2px; margin-bottom:-10px; "><span class="comhead"><a href="user?id=alain94040">alain94040</a> <a href="item?id=8745562">62 days ago</a> <span class="deadmark"></span></span></div><br>
<span class="comment"><font color="#000000">Yes, and the fact that most of the performance comes from the micro-architecture.<p>CPU design is all about the tradeoff between size, complexity, speed and power consumption.<p>New RISC architectures tend to start on the low-end of the scale (clean architecture, short pipeline, small die), and if they are successful, move toward the x86&#x2F;ugly&#x2F;big&#x2F;complex&#x2F;fast spot.</font></span><p><font size="1"><font color="#f6f6ef">-----</font></font></td></tr></table></td></tr><tr><td><table border="0"><tr><td><img src="s.gif" height="1" width="40"></td><td valign="top"><center><a id="up_8746955" href="vote?for=8746955&amp;dir=up&amp;goto=item%3Fid%3D8744929"><div class="votearrow" title="upvote"></div></a><span id="down_8746955"></span></center></td><td class="default"><div style="margin-top:2px; margin-bottom:-10px; "><span class="comhead"><a href="user?id=zhemao">zhemao</a> <a href="item?id=8746955">62 days ago</a> <span class="deadmark"></span></span></div><br>
<span class="comment"><font color="#000000">If you have a Xilinx FPGA, you can program our newly released Rocket core onto it and play around. <a href="https://github.com/ucb-bar/rocket-chip" rel="nofollow">https:&#x2F;&#x2F;github.com&#x2F;ucb-bar&#x2F;rocket-chip</a><p>We don&#x27;t have a production-quality SoC out, so &quot;practical use&quot; is still a ways away.</font></span><p><font size="1"><font color="#f6f6ef">-----</font></font></td></tr></table></td></tr><tr><td><table border="0"><tr><td><img src="s.gif" height="1" width="80"></td><td valign="top"><center><a id="up_8747336" href="vote?for=8747336&amp;dir=up&amp;goto=item%3Fid%3D8744929"><div class="votearrow" title="upvote"></div></a><span id="down_8747336"></span></center></td><td class="default"><div style="margin-top:2px; margin-bottom:-10px; "><span class="comhead"><a href="user?id=ash">ash</a> <a href="item?id=8747336">61 days ago</a> <span class="deadmark"></span></span></div><br>
<span class="comment"><font color="#000000">In your opinion, is it a good idea to replace ZPU with Rocket on Xilinx FPGA? What are advantages and disadvantages?<p><a href="http://opensource.zylin.com/zpu.htm" rel="nofollow">http:&#x2F;&#x2F;opensource.zylin.com&#x2F;zpu.htm</a></font></span><p><font size="1"><font color="#f6f6ef">-----</font></font></td></tr></table></td></tr><tr><td><table border="0"><tr><td><img src="s.gif" height="1" width="120"></td><td valign="top"><center><a id="up_8747392" href="vote?for=8747392&amp;dir=up&amp;goto=item%3Fid%3D8744929"><div class="votearrow" title="upvote"></div></a><span id="down_8747392"></span></center></td><td class="default"><div style="margin-top:2px; margin-bottom:-10px; "><span class="comhead"><a href="user?id=zhemao">zhemao</a> <a href="item?id=8747392">61 days ago</a> <span class="deadmark"></span></span></div><br>
<span class="comment"><font color="#000000">The ZPU is designed to use as few FPGA resources as possible. So if you&#x27;re looking for something to just do a little bit of control logic to tie things together, it probably is the way to go.<p>Rocket on the other hand is a full-fledged in-order core with hardware mutliplier, single-precision and double-precision floating-point units, and MMU. Therefore, it can do things like boot a full Linux kernel, which the ZPU cannot. Rocket also has the RoCC co-processor interface, which allows you to define your own ISA extensions in Chisel.</font></span><p><font size="1"><font color="#f6f6ef">-----</font></font></td></tr></table></td></tr><tr><td><table border="0"><tr><td><img src="s.gif" height="1" width="0"></td><td valign="top"><center><a id="up_8747283" href="vote?for=8747283&amp;dir=up&amp;goto=item%3Fid%3D8744929"><div class="votearrow" title="upvote"></div></a><span id="down_8747283"></span></center></td><td class="default"><div style="margin-top:2px; margin-bottom:-10px; "><span class="comhead"><a href="user?id=bsder">bsder</a> <a href="item?id=8747283">61 days ago</a> <span class="deadmark"></span></span></div><br>
<span class="comment"><font color="#000000">Why redesign a new core?  We have plenty to choose from that have semi-existing ecosystems.<p>First, I&#x27;d just go with a MIPS core.  This is effectively the original RISC core, after all.  Most patents have expired, and the Chinese have an implementation.<p>If I didn&#x27;t do that, I&#x27;d probably go with a DEC Alpha core.  A shrunk, voltage optimized Alpha core was what drove the StrongARM series, and people raved about it.  The Alpha architecture up through EV5 is quite clean.<p>Given that most data suggests that ecosystem and optimization is more important than basic architecture, reinventing the wheel is not a good thing here.</font></span><p><font size="1"><font color="#f6f6ef">-----</font></font></td></tr></table></td></tr><tr><td><table border="0"><tr><td><img src="s.gif" height="1" width="40"></td><td valign="top"><center><a id="up_8747416" href="vote?for=8747416&amp;dir=up&amp;goto=item%3Fid%3D8744929"><div class="votearrow" title="upvote"></div></a><span id="down_8747416"></span></center></td><td class="default"><div style="margin-top:2px; margin-bottom:-10px; "><span class="comhead"><a href="user?id=techdragon">techdragon</a> <a href="item?id=8747416">61 days ago</a> <span class="deadmark"></span></span></div><br>
<span class="comment"><font color="#000000">Unfortunately the Alpha core is unlikely to ever return, much as its fans would like.<p>Sparc is open back at the T1 T2 era pre oracle takeover. That&#x27;s not a bad place to go, but MIPS is not really ideal due to a lot of factors that make the Chinese clones less than appealing.</font></span><p><font size="1"><font color="#f6f6ef">-----</font></font></td></tr></table></td></tr><tr><td><table border="0"><tr><td><img src="s.gif" height="1" width="0"></td><td valign="top"><center><a id="up_8745454" href="vote?for=8745454&amp;dir=up&amp;goto=item%3Fid%3D8744929"><div class="votearrow" title="upvote"></div></a><span id="down_8745454"></span></center></td><td class="default"><div style="margin-top:2px; margin-bottom:-10px; "><span class="comhead"><a href="user?id=zzzcpan">zzzcpan</a> <a href="item?id=8745454">62 days ago</a> <span class="deadmark"></span></span></div><br>
<span class="comment"><font color="#000000">Is there a picture of RISC-V architecture (with pipeline, ALUs, FPUs)? Couldn&#x27;t find anything.</font></span><p><font size="1"><font color="#f6f6ef">-----</font></font></td></tr></table></td></tr><tr><td><table border="0"><tr><td><img src="s.gif" height="1" width="40"></td><td valign="top"><center><a id="up_8745488" href="vote?for=8745488&amp;dir=up&amp;goto=item%3Fid%3D8744929"><div class="votearrow" title="upvote"></div></a><span id="down_8745488"></span></center></td><td class="default"><div style="margin-top:2px; margin-bottom:-10px; "><span class="comhead"><a href="user?id=asb">asb</a> <a href="item?id=8745488">62 days ago</a> <span class="deadmark"></span></span></div><br>
<span class="comment"><font color="#000000">You&#x27;re asking for a picture of a particular RISC-V implementation and its chosen microarchitecture. The RISC-V ISA has a range of different implementations each hitting different points in the design space and different trade-offs in terms of area&#x2F;performance. See for instance the &#x27;Sodor&#x27; teaching cores <a href="https://github.com/ucb-bar/riscv-sodor" rel="nofollow">https:&#x2F;&#x2F;github.com&#x2F;ucb-bar&#x2F;riscv-sodor</a> <a href="https://github.com/ucb-bar/riscv-sodor/wiki" rel="nofollow">https:&#x2F;&#x2F;github.com&#x2F;ucb-bar&#x2F;riscv-sodor&#x2F;wiki</a> which demonstrate 1-stage, 2-stage, 3-stage, 5-stage, and micro-coded implementations.</font></span><p><font size="1"><font color="#f6f6ef">-----</font></font></td></tr></table></td></tr><tr><td><table border="0"><tr><td><img src="s.gif" height="1" width="80"></td><td valign="top"><center><a id="up_8745928" href="vote?for=8745928&amp;dir=up&amp;goto=item%3Fid%3D8744929"><div class="votearrow" title="upvote"></div></a><span id="down_8745928"></span></center></td><td class="default"><div style="margin-top:2px; margin-bottom:-10px; "><span class="comhead"><a href="user?id=ibrahima">ibrahima</a> <a href="item?id=8745928">62 days ago</a> <span class="deadmark"></span></span></div><br>
<span class="comment"><font color="#000000">Oh man, that&#x27;s cool. I must have just missed out on this when taking CS152, we played with simulated SPARC when I took the course IIRC.</font></span><p><font size="1"><font color="#f6f6ef">-----</font></font></td></tr></table></td></tr><tr><td><table border="0"><tr><td><img src="s.gif" height="1" width="80"></td><td valign="top"><center><a id="up_8745504" href="vote?for=8745504&amp;dir=up&amp;goto=item%3Fid%3D8744929"><div class="votearrow" title="upvote"></div></a><span id="down_8745504"></span></center></td><td class="default"><div style="margin-top:2px; margin-bottom:-10px; "><span class="comhead"><a href="user?id=zzzcpan">zzzcpan</a> <a href="item?id=8745504">62 days ago</a> <span class="deadmark"></span></span></div><br>
<span class="comment"><font color="#000000">Thanks.</font></span><p><font size="1"><font color="#f6f6ef">-----</font></font></td></tr></table></td></tr><tr><td><table border="0"><tr><td><img src="s.gif" height="1" width="0"></td><td valign="top"><center><a id="up_8745183" href="vote?for=8745183&amp;dir=up&amp;goto=item%3Fid%3D8744929"><div class="votearrow" title="upvote"></div></a><span id="down_8745183"></span></center></td><td class="default"><div style="margin-top:2px; margin-bottom:-10px; "><span class="comhead"><a href="user?id=PythonicAlpha">PythonicAlpha</a> <a href="item?id=8745183">62 days ago</a> <span class="deadmark"></span></span></div><br>
<span class="comment"><font color="#000000">As much I heard, the ARM instruction set is also not so simple as it could. So a new, fresh and clean instruction set would be great and the comparison of the two architectures looks promising.<p>I scan-read the paper, but did not encounter any number of registers. Does anybody know, how many registers this architecture has&#x2F;supports ... is there any implementation yet?<p>Hope, there will be an implementation soon, and maybe a smartphone or tablet computer based on it... (or a new Raspberry?)<p>Edit: Now I see, should be 32 registers, based on the 32bit opcode-format (5 bits to address any register).</font></span><p><font size="1"><font color="#f6f6ef">-----</font></font></td></tr></table></td></tr><tr><td><table border="0"><tr><td><img src="s.gif" height="1" width="40"></td><td valign="top"><center><a id="up_8745629" href="vote?for=8745629&amp;dir=up&amp;goto=item%3Fid%3D8744929"><div class="votearrow" title="upvote"></div></a><span id="down_8745629"></span></center></td><td class="default"><div style="margin-top:2px; margin-bottom:-10px; "><span class="comhead"><a href="user?id=userbinator">userbinator</a> <a href="item?id=8745629">62 days ago</a> <span class="deadmark"></span></span></div><br>
<span class="comment"><font color="#000000"><i>As much I heard, the ARM instruction set is also not so simple as it could.</i><p>I&#x27;d argue that&#x27;s part of why it&#x27;s been so successful, especially in competition with the other big ISA - x86. Complex instructions are <i>good</i> because they do a lot in a small size, and a small size is good because it conserves cache usage and memory bandwidth; decoding is rarely the bottleneck now. That&#x27;s why ARM has Thumb, and their latest cores are similar to x86&#x27;s uop-decoding and decoupled decoder&#x2F;execution units.<p>The whole &quot;it can be done faster in software&quot; idea of RISC was mainly based on some early CISC microarchitectures that weren&#x27;t implemented as efficiently as they could be, which doesn&#x27;t imply that they couldn&#x27;t be. Look at all the instructions added by the various SSE extensions, for example; the performance&#x2F;speed improvements they provide are real, and the cost of the hardware is basically negligible in comparison.<p>Here&#x27;s an interesting comparison where ARM and x86 are quite close in power efficiency, while MIPS is relatively far behind:
<a href="http://www.extremetech.com/extreme/188396-the-final-isa-showdown-is-arm-x86-or-mips-intrinsically-more-power-efficient" rel="nofollow">http:&#x2F;&#x2F;www.extremetech.com&#x2F;extreme&#x2F;188396-the-final-isa-show...</a></font></span><p><font size="1"><font color="#f6f6ef">-----</font></font></td></tr></table></td></tr><tr><td><table border="0"><tr><td><img src="s.gif" height="1" width="80"></td><td valign="top"><center><a id="up_8745649" href="vote?for=8745649&amp;dir=up&amp;goto=item%3Fid%3D8744929"><div class="votearrow" title="upvote"></div></a><span id="down_8745649"></span></center></td><td class="default"><div style="margin-top:2px; margin-bottom:-10px; "><span class="comhead"><a href="user?id=hga">hga</a> <a href="item?id=8745649">62 days ago</a> <span class="deadmark"></span></span></div><br>
<span class="comment"><font color="#000000">Well, the other angles were &quot;what can we fit on a die?&quot; and the relative speeds of single die CPUs and memory.<p>These have changed throughout history, e.g. when I was reading the Wikipedia CDC 6600 page, it pointed out magnetic core memory of the time could be much faster than germanium transistor CPUs (we&#x27;re talking about the days when transistors had serial numbers!), and the silicon ones it were built with were fast enough that, with clever architecture (a 60 bit floating point multiply or divide still took many more cycles than a fast memory cycle) and compilers, a theoretical 3 MFLOPs resulted in an achievable 0.5 MFLOPS in FORTRAN.  My first job in 1980 was supporting applied mathematicians who ran their FORTRAN on CDC and CRAY hardware at NCAR a couple of thousand miles away. One thing they were always concerned with was to write their array manipulations in a way that the compiler recognized to use the vector hardware.<p>Back then there was a huge premium on getting a serious CPU on a single die, and I think the speed mismatch with DRAM wasn&#x27;t hardly as severe.</font></span><p><font size="1"><font color="#f6f6ef">-----</font></font></td></tr></table></td></tr><tr><td><table border="0"><tr><td><img src="s.gif" height="1" width="80"></td><td valign="top"><center><a id="up_8746711" href="vote?for=8746711&amp;dir=up&amp;goto=item%3Fid%3D8744929"><div class="votearrow" title="upvote"></div></a><span id="down_8746711"></span></center></td><td class="default"><div style="margin-top:2px; margin-bottom:-10px; "><span class="comhead"><a href="user?id=yaantc">yaantc</a> <a href="item?id=8746711">62 days ago</a> <span class="deadmark"></span></span></div><br>
<span class="comment"><font color="#000000">I&#x27;m not sure that the Extremetech page allows concluding much on its own regarding MIPS efficiency vs. others as the implementations are pretty different and the only MIPS instance is an oddball: it&#x27;s OoO and 4-wide as the i7, while being on a very old process (90nm) while the all other chips are on better processes, and the 3 or 4 wide ones on 32 nm. 3 process generations tends to have an impact on efficiency ;)<p>Also on this topic: if the original MIPS was indeed very simple, recent versions added thumb-like code compression, SIMD extensions, DSP extensions... As everyone else does really. And you can get similar CPU benchmarks level as other architectures. 
Then the very same instruction architecture can have pretty wide power efficiency differences depending on implementations. Just look at Atom vs. Core, A8 vs. 15... Even the same model shows big differences based on implementation choices (optimize for speed vs. area&#x2F;cost for example).<p>As someone working on SoC, I believe the key difference in MIPS vs. ARM vs. Intel is not so much the instruction set, but the work effort spent on optimizing the implementations close to the processes. It&#x27;s pretty obvious for Intel, but ARM spends a lot of time with the big foundries (TSMC, GlobalFoundries, Samsung) to make sure their implementation are well tuned. And they pass on the know-how to their customers through what they call &quot;POPs&quot; (Process Optimization Packages). This is important for ARM, but also for the foundries as ARM is the de facto standard in mobile. A lot of work go in this, and it shows at the high end. MIPS&#x2F;Imagination recently propose something similar for MIP, but they&#x27;re far from having the same amount of resources. That&#x27;s the main difference between MIPS and ARM at the high-end IMHO.</font></span><p><font size="1"><font color="#f6f6ef">-----</font></font></td></tr></table></td></tr><tr><td><table border="0"><tr><td><img src="s.gif" height="1" width="120"></td><td valign="top"><center><a id="up_8746728" href="vote?for=8746728&amp;dir=up&amp;goto=item%3Fid%3D8744929"><div class="votearrow" title="upvote"></div></a><span id="down_8746728"></span></center></td><td class="default"><div style="margin-top:2px; margin-bottom:-10px; "><span class="comhead"><a href="user?id=WallWextra">WallWextra</a> <a href="item?id=8746728">62 days ago</a> <span class="deadmark"></span></span></div><br>
<span class="comment"><font color="#000000">It would have been nice if they had a MIPS core actually designed by MIPS.</font></span><p><font size="1"><font color="#f6f6ef">-----</font></font></td></tr></table></td></tr><tr><td><table border="0"><tr><td><img src="s.gif" height="1" width="40"></td><td valign="top"><center><a id="up_8745252" href="vote?for=8745252&amp;dir=up&amp;goto=item%3Fid%3D8744929"><div class="votearrow" title="upvote"></div></a><span id="down_8745252"></span></center></td><td class="default"><div style="margin-top:2px; margin-bottom:-10px; "><span class="comhead"><a href="user?id=sklogic">sklogic</a> <a href="item?id=8745252">62 days ago</a> <span class="deadmark"></span></span></div><br>
<span class="comment"><font color="#000000">&gt; Hope, there will be an implementation soon<p>It&#x27;s quite possible: <a href="http://www.lowrisc.org/" rel="nofollow">http:&#x2F;&#x2F;www.lowrisc.org&#x2F;</a></font></span><p><font size="1"><font color="#f6f6ef">-----</font></font></td></tr></table></td></tr><tr><td><table border="0"><tr><td><img src="s.gif" height="1" width="80"></td><td valign="top"><center><a id="up_8745464" href="vote?for=8745464&amp;dir=up&amp;goto=item%3Fid%3D8744929"><div class="votearrow" title="upvote"></div></a><span id="down_8745464"></span></center></td><td class="default"><div style="margin-top:2px; margin-bottom:-10px; "><span class="comhead"><a href="user?id=hga">hga</a> <a href="item?id=8745464">62 days ago</a> <span class="deadmark"></span></span></div><br>
<span class="comment"><font color="#000000">Per that page, &quot;<i>multiple high performance [RISC-V] chips have been produced, at 45 and 28nm</i>&quot;, which is very encouraging.<p>More from the page, enough to get me interested:<p>On performance: &quot;<i>As a rough guide we would expect ~500-1GHz at 40nm and ~1.0-1.5GHz at 28nm.</i>&quot;<p><i>Is volume fabrication feasible?<p>Yes. There are a number of routes open to us. Early production runs are likely to be done in batches of ~25 wafers. This would yield around 100-200K good chips per batch. We expect to produce packaged chips for less than $10 each.</i><p>Looking at this slide show: <a href="https://speakerdeck.com/asb/lowrisc-a-first-look" rel="nofollow">https:&#x2F;&#x2F;speakerdeck.com&#x2F;asb&#x2F;lowrisc-a-first-look</a> I see they&#x27;re doing some very interesting things.  Besides a lot of usual stuff, 2 cores each with I+D L1 and a shared L2 cache, they&#x27;ve added tags!<p>2 bits of tags, and they&#x27;re thinking general purposes (e.g. GC) as well as security.  That&#x27;s big, something we haven&#x27;t seen in hardware since Lisp Machines, to my knowledge.<p>Also I&#x2F;O &quot;minions&quot;, non-coherent RISC-V cores, like the CDC 6600 etc.<p>I&#x27;m now quite interested in the project.</font></span><p><font size="1"><font color="#f6f6ef">-----</font></font></td></tr></table></td></tr><tr><td><table border="0"><tr><td><img src="s.gif" height="1" width="120"></td><td valign="top"><center><a id="up_8745837" href="vote?for=8745837&amp;dir=up&amp;goto=item%3Fid%3D8744929"><div class="votearrow" title="upvote"></div></a><span id="down_8745837"></span></center></td><td class="default"><div style="margin-top:2px; margin-bottom:-10px; "><span class="comhead"><a href="user?id=rogerbinns">rogerbinns</a> <a href="item?id=8745837">62 days ago</a> <span class="deadmark"></span></span></div><br>
<span class="comment"><font color="#000000">&gt; 2 bits of tags, and they&#x27;re thinking general purposes (e.g. GC) as well as security. That&#x27;s big, something we haven&#x27;t seen in hardware since Lisp Machines, to my knowledge.<p>The IBM AS&#x2F;400 or whatever it is called this week uses tags too for security.  (A bit is flipped if a pointer is written too thereby preventing changing pointers.)  The PowerPC chip has optional support for tags because of this.<p>Source:  <a href="http://www.amazon.com/Inside-AS-400-Second-Edition/dp/1882419669" rel="nofollow">http:&#x2F;&#x2F;www.amazon.com&#x2F;Inside-AS-400-Second-Edition&#x2F;dp&#x2F;188241...</a></font></span><p><font size="1"><font color="#f6f6ef">-----</font></font></td></tr></table></td></tr><tr><td><table border="0"><tr><td><img src="s.gif" height="1" width="120"></td><td valign="top"><center><a id="up_8745481" href="vote?for=8745481&amp;dir=up&amp;goto=item%3Fid%3D8744929"><div class="votearrow" title="upvote"></div></a><span id="down_8745481"></span></center></td><td class="default"><div style="margin-top:2px; margin-bottom:-10px; "><span class="comhead"><a href="user?id=asb">asb</a> <a href="item?id=8745481">62 days ago</a> <span class="deadmark"></span></span></div><br>
<span class="comment"><font color="#000000">Thanks for your interest, we&#x27;re hoping to share more very soon.</font></span><p><font size="1"><font color="#f6f6ef">-----</font></font></td></tr></table></td></tr><tr><td><table border="0"><tr><td><img src="s.gif" height="1" width="160"></td><td valign="top"><center><a id="up_8745618" href="vote?for=8745618&amp;dir=up&amp;goto=item%3Fid%3D8744929"><div class="votearrow" title="upvote"></div></a><span id="down_8745618"></span></center></td><td class="default"><div style="margin-top:2px; margin-bottom:-10px; "><span class="comhead"><a href="user?id=hga">hga</a> <a href="item?id=8745618">62 days ago</a> <span class="deadmark"></span></span></div><br>
<span class="comment"><font color="#000000">You&#x27;re very welcome.<p>Read and write barrier instructions could be very nice for GC, but those can be done at the page level, I think (I would look at the Azul&#x27;s Pauseless collector for one state of the art custom hardware approach, and their C4 for doing without on x86_64).<p>But I&#x27;m more interested in tags for dynamically typed languages like Lisp.  You don&#x27;t need many bits, Symbolics used only 4 &quot;hard&quot; ones in the 36 bit 3600 line, which allowed for immediate 32 bit integer and floating numbers, then another 4, leaving 28 bits for word based addressing.<p>In modern byte addressed CPUs, you can use the least significant bits that are 0 in a pointer for tagging, so the 2 &quot;hard&quot; bits you propose are enough to work with.  Basically, as long as we don&#x27;t have to box floats!<p>Although it would be nice if we could set things up so that e.g. floating point operations could proceed at full speed, generating a fault if the tag bits on the operands aren&#x27;t correct ... although superscalar CPUs can do both in parallel without &quot;hard&quot; tags.  Are your two main cores going to be superscalar?<p>And I guess to finish my wishlist, a potential for a lot of ECC DRAM would be nice, at least 16 GiB.<p>ADDED: flip side is don&#x27;t let the Second System Syndrome sink this effort (the Raspberry Pi being the first; just going to your own new architecture SoC is a really big step!).</font></span><p><font size="1"><font color="#f6f6ef">-----</font></font></td></tr></table></td></tr><tr><td><table border="0"><tr><td><img src="s.gif" height="1" width="200"></td><td valign="top"><center><a id="up_8745722" href="vote?for=8745722&amp;dir=up&amp;goto=item%3Fid%3D8744929"><div class="votearrow" title="upvote"></div></a><span id="down_8745722"></span></center></td><td class="default"><div style="margin-top:2px; margin-bottom:-10px; "><span class="comhead"><a href="user?id=asb">asb</a> <a href="item?id=8745722">62 days ago</a> <span class="deadmark"></span></span></div><br>
<span class="comment"><font color="#000000">The 2-4 main cores will be derived from the UC Berkeley Rocket core generator <a href="https://github.com/ucb-bar/rocket" rel="nofollow">https:&#x2F;&#x2F;github.com&#x2F;ucb-bar&#x2F;rocket</a>. Currently this is single issue, in-order though it is designed to be a dual-issue in-order core (i.e. superscalar).</font></span><p><font size="1"><font color="#f6f6ef">-----</font></font></td></tr></table></td></tr><tr><td><table border="0"><tr><td><img src="s.gif" height="1" width="240"></td><td valign="top"><center><a id="up_8746243" href="vote?for=8746243&amp;dir=up&amp;goto=item%3Fid%3D8744929"><div class="votearrow" title="upvote"></div></a><span id="down_8746243"></span></center></td><td class="default"><div style="margin-top:2px; margin-bottom:-10px; "><span class="comhead"><a href="user?id=hga">hga</a> <a href="item?id=8746243">62 days ago</a> <span class="deadmark"></span></span></div><br>
<span class="comment"><font color="#000000">Errr, correct me if I&#x27;m wrong, but as I read the v2 RISC-V spec (starting with the absence of a flags register!), plus some quality time on Google, RISC-V has <i>no</i> provision for integer computation errors besides divide by zero (which can be checked for).  From the spec:<p>&quot;<i>We did not include special instruction set support for overflow checks on integer arithmetic operations. Most popular programming languages do not support checks for integer overflow, partly because most architectures impose a  significant runtime penalty to check for overflow on integer arithmetic and partly because modulo arithmetic is sometimes  the desired behavior.</i>&quot;<p>!!!<p>Or, RISC-V is a Worse is Better (<a href="https://en.wikipedia.org/wiki/Worse_is_better" rel="nofollow">https:&#x2F;&#x2F;en.wikipedia.org&#x2F;wiki&#x2F;Worse_is_better</a>), New Jersey style processor, following the same exact model of the primacy of implementation simplicity.<p>Well, especially since we aren&#x27;t going to get people to use &quot;safe&quot; languages prior to e.g. software errors killing 4-6 figures of people, I guess it&#x27;s a really good thing you&#x27;re adding tag bits that can be used to improve security in unsafe languages.<p>On the other hand, as a CPU for The Right Way operating systems and languages like Lisp, RISC-V would seem to be ... subpar, especially since who knows what other corners have or will be cut.  (Yeah, I know you can check, and for Lisps, it would be fairly cheap to have fixnums be 32 to 29 bits (subtracting LSB bits for more tagging) and then promote them to bignums, but....)<p>While I think you&#x27;re doing a very good thing for the world as it is, my personal interest has dropped ... but that&#x27;s OK, I&#x27;ve got a couple of years to muse about this as you develop your design and get it into production.</font></span><p><font size="1"><font color="#f6f6ef">-----</font></font></td></tr></table></td></tr><tr><td><table border="0"><tr><td><img src="s.gif" height="1" width="280"></td><td valign="top"><center><a id="up_8746509" href="vote?for=8746509&amp;dir=up&amp;goto=item%3Fid%3D8744929"><div class="votearrow" title="upvote"></div></a><span id="down_8746509"></span></center></td><td class="default"><div style="margin-top:2px; margin-bottom:-10px; "><span class="comhead"><a href="user?id=asb">asb</a> <a href="item?id=8746509">62 days ago</a> <span class="deadmark"></span></span></div><br>
<span class="comment"><font color="#000000">I am personally very sympathetic to concerns about the efficiency of overflow checking. There has been some discussion of this on the riscv-hw mailing list, e.g. <a href="https://lists.riscv.org/lists/arc/hw-dev/2014-09/msg00007.html" rel="nofollow">https:&#x2F;&#x2F;lists.riscv.org&#x2F;lists&#x2F;arc&#x2F;hw-dev&#x2F;2014-09&#x2F;msg00007.ht...</a>. The current position of the Berkeley team is that overflow checking just adds a single rarely taken branch, which can easily be predicted. If new data is produced (such as evaluating a wider range of instruction traces, e.g. those from programs not in C), there may well be an argument to be made for new instruction set additions. There is a plan for some sort of RISC-V consortium with representation from all major implementors, though this is will take a while to develop. I imagine we&#x27;ll be discussing this at the RISC-V Workshop 14th-15th Jan in CA <a href="http://riscv.org/workshop/" rel="nofollow">http:&#x2F;&#x2F;riscv.org&#x2F;workshop&#x2F;</a></font></span><p><font size="1"><font color="#f6f6ef">-----</font></font></td></tr></table></td></tr><tr><td><table border="0"><tr><td><img src="s.gif" height="1" width="320"></td><td valign="top"><center><a id="up_8752201" href="vote?for=8752201&amp;dir=up&amp;goto=item%3Fid%3D8744929"><div class="votearrow" title="upvote"></div></a><span id="down_8752201"></span></center></td><td class="default"><div style="margin-top:2px; margin-bottom:-10px; "><span class="comhead"><a href="user?id=renox">renox</a> <a href="item?id=8752201">60 days ago</a> <span class="deadmark"></span></span></div><br>
<span class="comment"><font color="#000000">&gt; the current position of the Berkeley team is that overflow checking just adds a single rarely taken branch, which can easily be predicted<p>I find this argument VERY weak: you need many of these &#x27;very rarely taken branch&#x27; overflow checking instructions and they pollute the instruction cache..</font></span><p><font size="1"><font color="#f6f6ef">-----</font></font></td></tr></table></td></tr><tr><td><table border="0"><tr><td><img src="s.gif" height="1" width="360"></td><td valign="top"><center><a id="up_8763220" href="vote?for=8763220&amp;dir=up&amp;goto=item%3Fid%3D8744929"><div class="votearrow" title="upvote"></div></a><span id="down_8763220"></span></center></td><td class="default"><div style="margin-top:2px; margin-bottom:-10px; "><span class="comhead"><a href="user?id=leoc">leoc</a> <a href="item?id=8763220">58 days ago</a> <span class="deadmark"></span></span></div><br>
<span class="comment"><font color="#000000">And that&#x27;s also assuming that all of the necessary checks will in fact be added!</font></span><p><font size="1"><font color="#f6f6ef">-----</font></font></td></tr></table></td></tr><tr><td><table border="0"><tr><td><img src="s.gif" height="1" width="400"></td><td valign="top"><center><a id="up_8783309" href="vote?for=8783309&amp;dir=up&amp;goto=item%3Fid%3D8744929"><div class="votearrow" title="upvote"></div></a><span id="down_8783309"></span></center></td><td class="default"><div style="margin-top:2px; margin-bottom:-10px; "><span class="comhead"><a href="user?id=renox">renox</a> <a href="item?id=8783309">53 days ago</a> <span class="deadmark"></span></span></div><br>
<span class="comment"><font color="#000000">I don&#x27;t think that this part is really an issue: if the compiler by default adds the checks and only remove the checks very conservatively..</font></span><p><font size="1"><font color="#f6f6ef">-----</font></font></td></tr></table></td></tr><tr><td><table border="0"><tr><td><img src="s.gif" height="1" width="40"></td><td valign="top"><center><a id="up_8745347" href="vote?for=8745347&amp;dir=up&amp;goto=item%3Fid%3D8744929"><div class="votearrow" title="upvote"></div></a><span id="down_8745347"></span></center></td><td class="default"><div style="margin-top:2px; margin-bottom:-10px; "><span class="comhead"><a href="user?id=Someone">Someone</a> <a href="item?id=8745347">62 days ago</a> <span class="deadmark"></span></span></div><br>
<span class="comment"><font color="#000000">31. Register zero is hardwired to be zero.<p>[by the way, the PDF at <a href="http://riscv.org/download.html#tab_isaspec" rel="nofollow">http:&#x2F;&#x2F;riscv.org&#x2F;download.html#tab_isaspec</a> is clear reading]</font></span><p><font size="1"><font color="#f6f6ef">-----</font></font></td></tr></table></td></tr><tr><td><table border="0"><tr><td><img src="s.gif" height="1" width="80"></td><td valign="top"><center><a id="up_8745976" href="vote?for=8745976&amp;dir=up&amp;goto=item%3Fid%3D8744929"><div class="votearrow" title="upvote"></div></a><span id="down_8745976"></span></center></td><td class="default"><div style="margin-top:2px; margin-bottom:-10px; "><span class="comhead"><a href="user?id=PythonicAlpha">PythonicAlpha</a> <a href="item?id=8745976">62 days ago</a> <span class="deadmark"></span></span></div><br>
<span class="comment"><font color="#000000">Thanks. I think, this spec is to long for me now to read.<p>I am wondering, what the advantage of a zero register is? I thought about supporting direct operations, but adding zero does not make to much sense, same with minus, multiply, division .... OR&#x2F;AND&#x2F;XOR does also make not much sense. Storing data into this register also does not make to much sense ... or as garbage tray??? ;) (the hardware implemented garbage tray was once the April fool joke in an IT magazine).</font></span><p><font size="1"><font color="#f6f6ef">-----</font></font></td></tr></table></td></tr><tr><td><table border="0"><tr><td><img src="s.gif" height="1" width="120"></td><td valign="top"><center><a id="up_8746921" href="vote?for=8746921&amp;dir=up&amp;goto=item%3Fid%3D8744929"><div class="votearrow" title="upvote"></div></a><span id="down_8746921"></span></center></td><td class="default"><div style="margin-top:2px; margin-bottom:-10px; "><span class="comhead"><a href="user?id=lambda">lambda</a> <a href="item?id=8746921">62 days ago</a> <span class="deadmark"></span></span></div><br>
<span class="comment"><font color="#000000">If you take a look at the master&#x27;s thesis on designing the compressed opcode format[1] (expressing instructions in a 16 bit encoding, similar to ARM Thumb, to increase efficiency of instruction cache utilization), in which they counted what registers were used most often in order to determine which to allow access to in the compressed format, you&#x27;ll see that the 0 register is the 5th most common register, making up approximately 9% of all registers referenced in instructions. Dynamically, in terms of instructions actually executed as opposed to merely present, it&#x27;s a little less common at closer to 4%, but still common enough to be worth choosing as one of the 8 registers accessible in the compressed format (actually, they only allow it for some operands of particular instructions where it is particularly useful in the compressed format, allowing other operands to have access to one more real register).<p>It&#x27;s useful for several things. One is as a no-op instruction; as you point out, AND, OR, XOR, etc. with zero are no-ops, and no-ops are sometimes useful for achieving certain alignment in code, or leaving space for instructions to be patched out with other code (which is common for debugging, tracing, and hot-patching of code).<p>It can also be used for copying from one register to another, without another instruction. &quot;ADD rd, rs1, 0&quot; is a way to write &quot;MOVE rd, rs&quot;, so you don&#x27;t need to waste an extra instruction on that.<p>0 is also one of the most common values that you want to compare against (many loops can be turned into decrementing a value until it becomes zero, or you&#x27;re just walking along a data structure or string until you encounter a null value), and so their branch instructions work by comparing two registers and branching to a particular offset. Having a dedicated 0 register means you can always do a compare against 0 and branch in a single instruction, without having to have separate instructions for comparisons against immediates versus comparison of two registers.<p>[1]: <a href="http://www.eecs.berkeley.edu/Pubs/TechRpts/2011/EECS-2011-63.pdf" rel="nofollow">http:&#x2F;&#x2F;www.eecs.berkeley.edu&#x2F;Pubs&#x2F;TechRpts&#x2F;2011&#x2F;EECS-2011-63...</a></font></span><p><font size="1"><font color="#f6f6ef">-----</font></font></td></tr></table></td></tr><tr><td><table border="0"><tr><td><img src="s.gif" height="1" width="160"></td><td valign="top"><center><a id="up_8747001" href="vote?for=8747001&amp;dir=up&amp;goto=item%3Fid%3D8744929"><div class="votearrow" title="upvote"></div></a><span id="down_8747001"></span></center></td><td class="default"><div style="margin-top:2px; margin-bottom:-10px; "><span class="comhead"><a href="user?id=PythonicAlpha">PythonicAlpha</a> <a href="item?id=8747001">62 days ago</a> <span class="deadmark"></span></span></div><br>
<span class="comment"><font color="#000000">I did not think about comparisons ... that is right.<p>The other examples are also valid, but rather special to RISC architectures ... but of course it does the trick.</font></span><p><font size="1"><font color="#f6f6ef">-----</font></font></td></tr></table></td></tr><tr><td><table border="0"><tr><td><img src="s.gif" height="1" width="120"></td><td valign="top"><center><a id="up_8746025" href="vote?for=8746025&amp;dir=up&amp;goto=item%3Fid%3D8744929"><div class="votearrow" title="upvote"></div></a><span id="down_8746025"></span></center></td><td class="default"><div style="margin-top:2px; margin-bottom:-10px; "><span class="comhead"><a href="user?id=dezgeg">dezgeg</a> <a href="item?id=8746025">62 days ago</a> <span class="deadmark"></span></span></div><br>
<span class="comment"><font color="#000000">With a dedicated zero register it&#x27;s possible to implement some useful instructions as assembler pseudoinstructions and not on the CPU itself, saving chip area.<p>For example, the original MIPS instruction set has these pseudoinstructions:<p>- li $d, imm (load immediate) is replaced with ori $d, $0, imm (or immediate with the zero register)<p>- not $d, $s (bitwise complement) is replaced with nor $d, $0, $s (bitwise NOR with the zero register)<p>... and some others as well.</font></span><p><font size="1"><font color="#f6f6ef">-----</font></font></td></tr></table></td></tr><tr><td><table border="0"><tr><td><img src="s.gif" height="1" width="40"></td><td valign="top"><center><a id="up_8745441" href="vote?for=8745441&amp;dir=up&amp;goto=item%3Fid%3D8744929"><div class="votearrow" title="upvote"></div></a><span id="down_8745441"></span></center></td><td class="default"><div style="margin-top:2px; margin-bottom:-10px; "><span class="comhead"><a href="user?id=fidotron">fidotron</a> <a href="item?id=8745441">62 days ago</a> <span class="deadmark"></span></span></div><br>
<span class="comment"><font color="#000000">ARM have a real habit of churning out ISAs on an as needed basis, such as the Thumb stuff.<p>The uncomfortable reality here though is that this is just another project from the ultimately failed MIPS&#x2F;SPARC view of the world. ARM has little to zero academic credibility as it is really just a jumped up 6502. This lack of any sort of theoretical purity is really their big strength.</font></span><p><font size="1"><font color="#f6f6ef">-----</font></font></td></tr></table></td></tr><tr><td><table border="0"><tr><td><img src="s.gif" height="1" width="80"></td><td valign="top"><center><a id="up_8745605" href="vote?for=8745605&amp;dir=up&amp;goto=item%3Fid%3D8744929"><div class="votearrow" title="upvote"></div></a><span id="down_8745605"></span></center></td><td class="default"><div style="margin-top:2px; margin-bottom:-10px; "><span class="comhead"><a href="user?id=jacquesm">jacquesm</a> <a href="item?id=8745605">62 days ago</a> <span class="deadmark"></span></span></div><br>
<span class="comment"><font color="#000000">&gt; ARM has little to zero academic credibility as it is really just a jumped up 6502.<p>I think that statement is taking a few more shortcuts than are warranted.</font></span><p><font size="1"><font color="#f6f6ef">-----</font></font></td></tr></table></td></tr><tr><td><table border="0"><tr><td><img src="s.gif" height="1" width="0"></td><td valign="top"><center><a id="up_8745344" href="vote?for=8745344&amp;dir=up&amp;goto=item%3Fid%3D8744929"><div class="votearrow" title="upvote"></div></a><span id="down_8745344"></span></center></td><td class="default"><div style="margin-top:2px; margin-bottom:-10px; "><span class="comhead"><a href="user?id=higherpurpose">higherpurpose</a> <a href="item?id=8745344">62 days ago</a> <span class="deadmark"></span></span></div><br>
<span class="comment"><font color="#000000">This could be used for stuff like Arduino at least.</font></span><p><font size="1"><font color="#f6f6ef">-----</font></font></td></tr></table></td></tr></table><br><br>
</td></tr><tr><td><img src="s.gif" height="10" width="0"><table width="100%" cellspacing="0" cellpadding="1"><tr><td bgcolor="#ff6600"></td></tr></table><br>
<center><span class="yclinks"><a href="newsguidelines.html">Guidelines</a> | <a href="newsfaq.html">FAQ</a> | <a href="mailto:hn@ycombinator.com">Support</a> | <a href="lists">Lists</a> | <a href="bookmarklet.html">Bookmarklet</a> | <a href="dmca.html">DMCA</a> | <a href="http://www.ycombinator.com/">Y Combinator</a> | <a href="http://www.ycombinator.com/apply/">Apply</a> | <a href="http://www.ycombinator.com/contact/">Contact</a></span><br><br>
<form method="get" action="//hn.algolia.com/">Search: <input type="text" name="q" value="" size="17"></form></center></td></tr></table></center></body></html>